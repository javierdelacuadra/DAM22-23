public static void main(String[] args) {
        KeyStore ks2;
        try {
            ks2 = KeyStore.getInstance("PKCS12");
        } catch (KeyStoreException e) {
            throw new RuntimeException(e);
        }
        try {
            ks2.load(Files.newInputStream(Paths.get("KeyStoreCajaFuerte.pfx")), "oscar".toCharArray());
        } catch (IOException | CertificateException | NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }

        //Se obtiene la clave privada del KeyStore
        PrivateKey clavePrivada2;
        try {
            clavePrivada2 = (PrivateKey) ks2.getKey("privada", "oscar".toCharArray());
        } catch (KeyStoreException | NoSuchAlgorithmException | UnrecoverableKeyException e) {
            throw new RuntimeException(e);
        }

        //Se obtiene el certificado del KeyStore
        X509Certificate certificado2;
        try {
            certificado2 = (X509Certificate) ks2.getCertificate("publica");
        } catch (KeyStoreException e) {
            throw new RuntimeException(e);
        }

        //Se obtiene la clave pública del certificado
        PublicKey clavePublica2 = certificado2.getPublicKey();

        System.out.println("Clave pública del certificado: " + Base64.getEncoder().encodeToString(clavePublica2.getEncoded()));
        System.out.println("Clave privada del KeyStore: " + Base64.getEncoder().encodeToString(clavePrivada2.getEncoded()));
    }

    public void GENERARPFX(){
        Security.addProvider(new BouncyCastleProvider());

        //El cliente ha de generar clave pública y privada RSA y guardarle en un KeyStore (fichero)
        KeyPairGenerator generadorRSA2048; // Hace uso del provider BC
        try {
            generadorRSA2048 = KeyPairGenerator.getInstance("RSA");
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
        generadorRSA2048.initialize(2048);
        KeyPair clavesRSACliente = generadorRSA2048.generateKeyPair();

        //Se crea un certificado autofirmado con la clave pública
        X500Name nombre = new X500Name("CN=CajaFuerte");
        X509v3CertificateBuilder certBuilder = new JcaX509v3CertificateBuilder(
                nombre, //issuer
                BigInteger.valueOf(1), //serial number
                Date.from(LocalDate.now().atStartOfDay().toInstant(ZoneOffset.UTC)), //not valid before
                Date.from(LocalDate.now().plus(1, ChronoUnit.YEARS).atStartOfDay().toInstant(ZoneOffset.UTC)), //not valid after
                nombre, //subject
                clavesRSACliente.getPublic() //public key
        );

        //Se firma el certificado con la clave privada
        ContentSigner signer;
        try {
            signer = new JcaContentSignerBuilder("SHA1WithRSAEncryption").build(clavesRSACliente.getPrivate());
        } catch (OperatorCreationException e) {
            throw new RuntimeException(e);
        }

        //Se obtiene el certificado
        X509Certificate certificate;
        try {
            certificate = new JcaX509CertificateConverter().getCertificate(certBuilder.build(signer));
        } catch (CertificateException e) {
            throw new RuntimeException(e);
        }


        KeyStore ks;
        try {
            ks = KeyStore.getInstance("PKCS12");
            ks.load(null, null);
        } catch (KeyStoreException | CertificateException | IOException | NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }

        try {
            //Se guarda el certificado en el KeyStore
            ks.setCertificateEntry("publica", certificate);
            //Se guarda la clave privada en el KeyStore con la misma secretKey que el KeyStore
            ks.setKeyEntry("privada", clavesRSACliente.getPrivate(), "oscar".toCharArray(), new Certificate[]{certificate});
        } catch (KeyStoreException e) {
            throw new RuntimeException(e);
        }

        Path keystorePath = Paths.get("KeyStoreCajaFuerte.pfx");
        try (OutputStream fos = Files.newOutputStream(keystorePath)) {
            //Se guarda el KeyStore en el fichero
            ks.store(fos, "oscar".toCharArray());
        } catch (IOException | CertificateException | NoSuchAlgorithmException | KeyStoreException e) {
            throw new RuntimeException(e);
        }
    }